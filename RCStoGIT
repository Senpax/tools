#!/usr/bin/env bash
#========================================================================================
# Description 	:	This script will iterate over a directory (server directory) 
#					and find all the RCS directories to prepare for the migration 
#					from RCS to GIT
# Parameters 	:	$1 - 	Relative path to the server directory you wish to migrate
#					$2 - 	Name of the directory (name of server) you wish to migrate
#					$3 - 	Path to the local git repo you would like to store this
#							directory inside
# Usage			:	./RCStoGIT ~/path/to/server serverName ~/path/to/local/git/repo
#========================================================================================

#================================================
# Colors
#================================================
RESTORE='\033[0m'
GREEN='\e[32m'
YELLOW='\e[33m'
LIGHTRED='\e[91m'
BOLD='\e[1m'

#================================================
# Paramters
#================================================
RELATIVE_PATH_TO_SERVER=$1/
SERVER=$2
PATH_TO_SERVER=$RELATIVE_PATH_TO_SERVER$SERVER
RCS_FILES_TO_VERIFY=()

H1_SEPERATOR="========================================================================================================="
H2_SEPERATOR="---------------------------------------------------------------------------------------------------------"

printf "Scanning $PATH_TO_SERVER for RCS directories\n"

#================================================
# Traverse and process RCS folders and files
#================================================
find $PATH_TO_SERVER -type d -name "RCS" | while read RCS_DIRECTORY; do
	echo
	echo $H1_SEPERATOR
	printf "${BOLD}${YELLOW}Found $RCS_DIRECTORY${RESTORE}\n"
	
	# Traverse through each RCS subdirectory
	for f in $RCS_DIRECTORY/*
	do
		echo $H2_SEPERATOR
		printf "${BOLD}Preparing to chekout $f${RESTORE}\n\n"
		# Check if the file within the RCS directory has a ,v at the end
		if [[ $f == *",v"* ]]; then
			
			# Remove ,v from file
  			rcsFileWithoutCommaV=${f::-2}
			rcsFileToCheckOut=${rcsFileWithoutCommaV##*/}

			fileFound=$(find $RCS_DIRECTORY/.. -maxdepth 1 -type f -name $rcsFileToCheckOut)
			printf "${YELLOW}Comparing\n---------\nFile in RCS: $f\nChecked out file: $fileFound ${RESTORE}\n"

			DIFF=$(co -p -q -kk $f | diff -b -u -I '@(#)' -I '#.*:' $fileFound -)

			if [ "$DIFF" != "" ]; then
				echo "FOUND A DIFFERENCE"
				echo ADDING $f to ARRAY
				RCS_FILES_TO_VERIFY+=$f

				printf "${LIGHTRED}FILES DO NOT MATCH${RESTORE}\n"
				printf "${LIGHTRED}Skipping checkout $f${RESTORE}\n\n"
			else
				printf "${GREEN}---------\nFILES MATCH${RESTORE}\n\n"
				printf "Checking out $rcsFileToCheckOut from $RCS_DIRECTORY/..\n"

				# Go to parent directory of RCS directory, remove already checked out file, check out from the RCS directory ( fresh copy )
				( cd $RCS_DIRECTORY/.. ; co -f $rcsFileToCheckOut )
			fi
		else
			printf "${LIGHTRED}Skipping: $f${RESTORE}\n" 
			printf "${LIGHTRED}File was checked out inside of the RCS directory${RESTORE}\n"
		fi
	done
done

echo $H1_SEPERATOR
#================================================
# Convert RCS revisions to GIT
#================================================
(cd $PATH_TO_SERVER; git init && ~/gitprojects/tools/rcs-fast-export/rcs-fast-export.rb . | git fast-import && git reset)


echo $H1_SEPERATOR
echo ${RCS_FILES_TO_VERIFY[@]}
echo